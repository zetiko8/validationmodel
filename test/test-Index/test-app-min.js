// var expect=require("chai").expect,Model=require("../src/index");describe("Model definition",function(){it("Should create a new Model",function(){var e=new Model({property:"String"});expect(e instanceof Object)}),it("Created Model should have same properties as data object",function(){var e=new Model({property1:"String",property2:"Number",property3:"Object"});expect("String"===e.property1),expect("Number"===e.property2),expect("Object"===e.property3)})}),describe("Creating model instances",function(){it("Should create an instance of created Model",function(){var e=new Model({name:"String",id:"Number",duration:"Object"}).parse({name:"Event",id:1,duration:new Date});expect(e instanceof Object)}),it("Created instance should have the same properties as instanceData object",function(){var e=new Model({name:"String",id:"Number",duration:"Object"}),r={name:"Event",id:1,duration:new Date},t=e.parse(r);expect(t.name).to.eql(r.name),expect(t.id).to.eql(r.id),expect(t.duration).to.eql(r.duration)}),it("Should reject property type based on created Model",function(){var e=new Model({name:"String"});expect(e.parse.bind(e,{name:2})).to.throw()}),it("Should reject multiple property types based on created Model",function(){var e=new Model({name:"String",id:"String",duration:"Object"}),r={name:"Event",id:1,duration:new Date};expect(e.parse.bind(e,r)).to.throw()}),it("Should reject object with missing required data",function(){var e=new Model({name:{type:"String",required:!0},id:"Number",duration:"Object"}),r={id:1,duration:new Date};expect(e.parse.bind(e,r)).to.throw()}),it("Should'nt reject object with missing non-required data",function(){var e=new Model({name:{type:"String",required:!1},id:"Number",duration:"Object"}),r={id:1,duration:new Date},t=e.parse(r);expect(t).to.not.haveOwnProperty("name"),expect(t.id).to.eql(r.id),expect(t.duration).to.eql(r.duration)})}),describe("Different type comparison",function(){it("Should reject non-strings on keyword String",function(){var e=new Model({property:"String"});expect(e.parse.bind(e,{property:6})).to.throw()}),it("Should accept Strings on keyword String",function(){var e={property:"Event"},r=new Model({property:"String"}).parse(e);expect(r.property).to.eql(e.property)}),it("Should reject non-numbers on keyword Number",function(){var e=new Model({property:"Number"});expect(e.parse.bind(e,{property:"Event"})).to.throw()}),it("Should accept numbers on keyword Number",function(){var e={property:6},r=new Model({property:"Number"}).parse(e);expect(r.property).to.eql(e.property)}),it("Should reject non-Objects on keyword Object",function(){var e=new Model({property:"Object"});expect(e.parse.bind(e,{property:5})).to.throw()}),it("Should accept Objects on keyword Object",function(){var e=new Model({property:"Object"}),r={property:new Date},t=e.parse(r);expect(t.property).to.eql(r.property)}),it("Should reject non-Arrays on keyword Array",function(){var e=new Model({property:"Array"});expect(e.parse.bind(e,{property:3})).to.throw()}),it("Should accept Arrays on keyword Array",function(){var e={property:[3]},r=new Model({property:"Array"}).parse(e);expect(r.property).to.eql(e.property)}),it("Should reject non-String Arrays on keyword String-Array",function(){var e=new Model({property:"String-Array"});expect(e.parse.bind(e,{property:[1,"string",3]})).to.throw()}),it("Should accept all-String Arrays on keyword String-Array",function(){var e={property:["string","string","string"]},r=new Model({property:"String-Array"}).parse(e);expect(r.property).to.eql(e.property)}),it("Should reject numbers smaller then specified number"),it("Should reject non-CustomObjects on keyword <CustomObject>"),it("Should accept CustomObjects on keyword <CustomObject>",function(){function e(e,r){this.color=e,this.brand=r}var r=new Model({property:e}),t={property:new e("red","bmw")},o=r.parse(t);expect(o.property).to.eql(t.property)}),it("Should reject non-strings when give String constructor",function(){var e={property:String},r=new Model(e);expect(r.parse.bind(r,{property:6})).to.throw()})}),describe("Invalid model creation handling",function(){it("Should list the invalid property",function(){var e=new Model({property:"String-Array"});try{e.parse({property:[1,"string",3]});expect.fail("This should throw an error")}catch(e){expect(e.invalidProperties[0].property).to.equal("property"),expect(e.invalidProperties[0].requiredType).to.equal("String-Array")}}),it("Should list the missing required property")});